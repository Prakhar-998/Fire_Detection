import tkinter as tk
from tkinter import filedialog
import cv2
from ultralytics import YOLO
import cvzone
import math

class FireDetectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Fire Detector")
        
        self.model_path = r'C:\Users\Prakhar\Desktop\Fire_Detector_model\fire.pt'
        self.classnames = ['fire']
        self.model = YOLO(self.model_path)
        self.cap = None

        self.create_widgets()

    def create_widgets(self):
        self.start_btn = tk.Button(self.root, text="Start Detection", command=self.start_detection)
        self.start_btn.pack(pady=10)

        self.stop_btn = tk.Button(self.root, text="Stop Detection", command=self.stop_detection, state="disabled")
        self.stop_btn.pack(pady=5)

        self.canvas = tk.Canvas(self.root, width=640, height=480)
        self.canvas.pack()

    def start_detection(self):
        self.cap = cv2.VideoCapture(0)
        self.stop_btn.config(state="normal")
        self.start_btn.config(state="disabled")
        self.detect_fire()

    def detect_fire(self):
        ret, frame = self.cap.read()

        if not ret:
            print("Error: Unable to read frame from webcam.")
            self.stop_detection()
            return

        frame = cv2.resize(frame, (640, 480))

        result = self.model(frame, stream=True)

        for info in result:
            boxes = info.boxes
            for box in boxes:
                confidence = math.ceil(box.conf[0] * 100)
                Class = int(box.cls[0])

                if confidence > 60:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 5)
                    cvzone.putTextRect(frame, f'{self.classnames[Class]} {confidence}%', [x1 + 8, y1 + 100],
                                       scale=1.5, thickness=2)

        self.photo = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        self.photo = cv2.resize(self.photo, (640, 480))
        self.photo = tk.PhotoImage(data=cv2.imencode('.png', self.photo)[1].tobytes())
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.photo)

        if self.cap.isOpened():
            self.root.after(10, self.detect_fire)
        else:
            self.stop_detection()

    def stop_detection(self):
        if self.cap is not None:
            self.cap.release()
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")


if __name__ == "__main__":
    root = tk.Tk()
    app = FireDetectorApp(root)
    root.mainloop()
